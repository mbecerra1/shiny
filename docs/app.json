[{"name":"App.R","content":"library(shiny);library(leaflet);library(sf);library(dplyr)\r\n\r\n\r\n# Load and transform the shapefile data\r\npoints_data <- st_read('cbsa_points.shp')\r\ntf_data <- st_transform(points_data, crs = '+proj=longlat +datum=WGS84')\r\n\r\n# UI\r\nui <- fluidPage(\r\n  titlePanel('Housing Mortgage Map'),\r\n  sidebarLayout(\r\n    sidebarPanel(\r\n      # Adding radioButtons to switch between \"All\" data or \"Filtered\" data\r\n      radioButtons(\r\n        inputId = \"filterOption\",\r\n        label = \"Display Options:\",\r\n        choiceNames = list(\r\n          \"Show All Data\", \r\n          \"Filter by State and Mortgage\"\r\n        ),\r\n        choiceValues = list(\"all\", \"filter\"),\r\n        selected = \"filter\"\r\n      ),\r\n      \r\n      sliderInput(inputId = 'mortgageRange',             \r\n                  label = 'Mortgage Range',\r\n                  min = min(tf_data$Mortgage, na.rm = TRUE),\r\n                  max = max(tf_data$Mortgage, na.rm = TRUE),\r\n                  value = c(min(tf_data$Mortgage, na.rm = TRUE), max(tf_data$Mortgage, na.rm = TRUE))),\r\n      \r\n      selectInput(inputId = 'stateFilter',            \r\n                  label = 'Select State',\r\n                  choices = unique(tf_data$State),\r\n                  selected = unique(tf_data$State)[1],\r\n                  multiple = TRUE)\r\n    ),\r\n    mainPanel(\r\n      leafletOutput(outputId = 'map', width = '100%', height = '500px')\r\n    )\r\n  )\r\n)\r\n\r\n# Server\r\nserver <- function(input, output) {\r\n  \r\n  # Reactive data based on radio button selection\r\n  filtered_data <- reactive({\r\n    if (input$filterOption == \"all\") {\r\n      return(tf_data)  # Return all data if \"All\" is selected\r\n    } else {\r\n      tf_data %>% filter(\r\n        Mortgage >= input$mortgageRange[1],   # Filter by mortgage range\r\n        Mortgage <= input$mortgageRange[2],\r\n        State %in% input$stateFilter          # Filter by selected states\r\n      )\r\n    }\r\n  })\r\n  \r\n  # Initial map render\r\n  output$map <- renderLeaflet({\r\n    leaflet() %>%\r\n      addTiles() %>%\r\n      setView(lng = mean(st_coordinates(tf_data)[, 1]), \r\n              lat = mean(st_coordinates(tf_data)[, 2]), \r\n              zoom = 6)\r\n  })\r\n  \r\n  # Observe filtered data and update the map accordingly\r\n  observe({\r\n    leafletProxy(\"map\", data = filtered_data()) %>%\r\n      clearMarkers() %>%\r\n      addCircleMarkers(\r\n        radius = 5,\r\n        color = \"blue\",\r\n        label = ~paste(\"Mortgage: \", Mortgage, \"State:\", State)\r\n      )\r\n  })\r\n}\r\n\r\n# Run the app\r\nshinyApp(ui, server)","type":"text"}]
